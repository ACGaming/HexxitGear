buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
}

defaultTasks 'build', 'install'
apply plugin: 'forge'
apply plugin: 'maven'

version = "2.0"
group= "sct.hexxitgear" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "hexxitgear"

ext.mixinSrg = new File(project.buildDir, "tmp/mixins/mixins.hexxitgear.srg")
ext.mixinRefMap = new File(project.buildDir, "tmp/mixins/mixin.refmap.json")

reobf.addExtraSrgFile project.mixinSrg

sourceCompatibility='1.7'
targetCompatibility='1.7'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    // Add Sponge repo for custom checkstyle implementation to fix some wrong warnings
    maven {
        name = "sponge-public"
        url = "http://repo.spongepowered.org/maven/"
    }
}


minecraft {
    version = "1.7.10-10.13.2.1307-1.7.10"
    runDir = "eclipse"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile "org.spongepowered:mixin:0.2-SNAPSHOT"
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    from 'LICENSE.txt'
}

def defaultEncoding = 'UTF-8'
compileJava {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-path',
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}",
            "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}"
    ]
    options.deprecation = true
    options.encoding = defaultEncoding
}

afterEvaluate {
    tasks.compileJava.options.compilerArgs += "-AreobfSrgFile=${tasks.reobf.srg}"
}

task copySrgs(type: Copy, dependsOn: "genSrgs") {
    from plugins.getPlugin("forge").delayedFile("{SRG_DIR}")

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs

def manifestEntries = [
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "FMLCorePlugin": "sct.hexxitgear.coremod.HexxitGearCoremod",
        "FMLCorePluginContainsFMLMod": 'true'
]

jar {
    from project.mixinRefMap
    manifest.mainAttributes(manifestEntries)
}

task sourceJar(type: Jar, dependsOn: sourceMainJava) {
    from "build/sources/java"
    from "build/resources/main/java"
    classifier = "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "dev"
}

artifacts {
    archives sourceJar
    archives deobfJar
}